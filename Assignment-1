#include <iostream>
#include <string>
#include <vector>
using namespace std;

bool isFunction(string input);

int main()
{
	bool done = false;
	while (!done)
	{
		vector<bool> statement;
		string input;
		cout << "Enter a Function:" << endl;
		getline(cin, input);

		if (isFunction(input))
		{
			cout << "This is a well formed function" << endl;
		}
		else
		{
			cout << "This is not a well formed function" << endl;
		}
		cout << "Would you like to run again? (y/n)" << endl;

		cin >> input;
		cin.ignore();

		if (input == "y" || input == "Y")
		{
			done = false;
		}
		else
		{
			done = true;
		}
	}
	system("pause");
	return 0;
}

bool isFunction(string input)
{
	string connectors = "&^vV";
	string negation = "!`~";
	string ifElse = "->";
	char previous = '*';

	// Bookend Checks
	for (int i = 0; i < input.length(); i++)
	{
		if (input[i] == ' ')
		{
			continue;
		}
		else if (isalpha(input[i]) || negation.find(input[i]) != std::string::npos)
		{
			break;
		}
		else
		{
			return false;
		}
	}

	for (int i = input.length() - 1; i > 0; i--)
	{
		if (input[i] == ' ')
		{
			continue;
		}
		else if (isalpha(input[i]))
		{
			break;
		}
		else
		{
			return false;
		}
	}

	//Parenthesis check
	int openP = 0;
	int closeP = 0;
	for (int i = 0; i < input.length(); i++)
	{
		if (input[i] == '(')
		{
			openP++;
			if (!isalpha(input[i + 1]))
			{
				return false;
			}
		}
		if (input[i] == ')')
		{
			closeP++;
			if (!isalpha(input[i - 1]))
			{
				return false;
			}
		}
	}
	if (openP != closeP)
	{
		return false;
	}


	//Logic
	for (char element : input)
	{
		if (element == ' ') //if space, skip
		{
			continue;
		}
		else if (connectors.find(element) != std::string::npos) // if connector(not ifelse)
		{
			if (connectors.find(previous) != std::string::npos) // if prev was connector, break
			{
				return false;
			}
		}
		else if (ifElse.find(element) != std::string::npos) // if ifElse
		{
			if (connectors.find(previous) != std::string::npos || previous == ifElse[1]) // if prev was connector or '>', break
			{
				return false;
			}
			if (previous == element) // if repeat char, break
			{
				return false;
			}
		}
		else if (negation.find(element) != std::string::npos) // if Not
		{
			if (negation.find(previous) != std::string::npos || isalpha(previous)) //if repeat or prev letter, break
			{
				return false;
			}
		}
		else if (isalpha(element)) // if Char
		{
			if (isalpha(previous) && connectors.find(previous) == std::string::npos) // if prev was char and not v, break
			{
				return false;
			}
		}

		previous = element;
	}

	return true;
}
