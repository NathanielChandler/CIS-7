// ConsoleApplication1.cpp : Defines the entry point for the console application.
//

// #include "stdafx.h"
#include <string>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
//string getInput();
struct peg {
	char name;
	vector<int> stack;
	bool operator<(const peg& a) const
	{
		return name < a.name;
	}

};

void hanoiTower(int towerSize, peg *from, peg *to, peg* aux);
void printPegs(peg peg1, peg peg2, peg peg3);


int main()
{
	//auto input = getInput();
	//cout << input;

	int towerSize = 3;
	vector<int> tower = { 3,2,1 };
	peg peg1;
	peg1.name = 'A';
	peg1.stack = tower;
	peg peg2;
	peg2.name = 'B';
	peg peg3;
	peg3.name = 'C';

	printPegs(peg1, peg2, peg3);
	hanoiTower(towerSize, &peg1, &peg2, &peg3);
	printPegs(peg1, peg2, peg3);
	system("pause");
	return 0;
}


void hanoiTower(int towerSize, peg* from, peg* to, peg* aux)
{
	if (towerSize > 0)
	{
		hanoiTower(towerSize - 1, from, aux, to);
		to->stack.push_back(from->stack.back());
		from->stack.pop_back();

		printPegs(*from, *to, *aux);
		hanoiTower(towerSize - 1, aux, to, from);
	}
}

void printPegs(peg peg1, peg peg2, peg peg3)
{
	vector<peg> pegs = { peg1, peg2, peg3 };
	sort(pegs.begin(), pegs.end());

	for (int i = 0; i < pegs.size(); i++)
	{
		cout << pegs[i].name << " | ";
		if (!(pegs[i].stack.empty()))
		{
			for (int j = 0; j < pegs[i].stack.size(); j++)
			{
				cout << pegs[i].stack[j] << ",";
			}
		}
		cout << endl;
	}
	cout << "+++++++++++++++++++++++" << endl;
}
